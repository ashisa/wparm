{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "WebVMInstance": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Web VMs to deploy"
      }
    },
    "AppVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of App VMs to deploy"
      }
    },
    "EmailVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of Email Analytics VMs to deploy"
      }
    },
    "MongoVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of Mongo VMs to deploy"
      }
    },
    "GraphVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of Graph VMs to deploy"
      }
    },
    "MySQLVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of VMs to deploy"
      }
    },
    "KafkaVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of Kafka VMs to deploy"
      }
    },
    "ESVMInstance": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Number of Elastic Search VMs to deploy"
      }
    },
    "VNetName": {
      "type": "string",
      "defaultValue": "vnet01",
      "metadata": {
        "description": "Name of the VNet"
      }
    },
    "Location": {
      "type": "string",
      "defaultValue": "southindia",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "virtualNetworkName": "[parameters('VNetName')]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/24",
    "subnet1Ref": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('virtualNetworkName'),variables('subnet1Name'))]",
    "avSet": [
      {
        "Name": "webavset",
        "Condition": "[greater(parameters('WebVMInstance'),0)]"
      },
      {
        "Name": "appavset",
        "Condition": "[greater(parameters('AppVMInstance'),0)]"
      },
      {
        "Name": "emailavset",
        "Condition": "[greater(parameters('EmailVMInstance'),0)]"
      },
      {
        "Name": "mongoavset",
        "Condition": "[greater(parameters('MongoVMInstance'),0)]"
      },
      {
        "Name": "graphavset",
        "Condition": "[greater(parameters('GraphVMInstance'),0)]"
      },
      {
        "Name": "kafkaavset",
        "Condition": "[greater(parameters('KafkaVMInstance'),0)]"
      },
      {
        "Name": "mysqlavset",
        "Condition": "[greater(parameters('MySQLVMInstance'),0)]"
      },
      {
        "Name": "esavset",
        "Condition": "[greater(parameters('ESVMInstance'),0)]"
      }
    ],
    "webVMProperty": {
      "Condition": "[greater(parameters('WebVMInstance'),0)]",
      "VMPrefix": "webvm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('WebVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2",
      "LBName": "weblb",
      "LBType": "ext",
      "LBID": "[resourceId('Microsoft.Network/loadBalancers', 'weblb')]",
      "FrontEndIPConfigID": "[concat(resourceId('Microsoft.Network/loadBalancers', 'weblb'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
      "LBPoolID": "[concat(resourceId('Microsoft.Network/loadBalancers', 'weblb'),'/backendAddressPools/BackendPool1')]",
      "LBProbeID": "[concat(resourceId('Microsoft.Network/loadBalancers', 'weblb'),'/probes/tcpProbe')]",
      "LBIPType": "Dynamic",
      "LBPIPID": "[resourceId('Microsoft.Network/publicIPAddresses', 'weblb-pip')]"
    },
    "appVMProperty": {
      "Condition": "[greater(parameters('AppVMInstance'),0)]",
      "VMPrefix": "appvm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('AppVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    },
    "emailVMProperty": {
      "Condition": "[greater(parameters('EmailVMInstance'),0)]",
      "VMPrefix": "emailvm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('EmailVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    },
    "mongoVMProperty": {
      "Condition": "[greater(parameters('MongoVMInstance'),0)]",
      "VMPrefix": "mongovm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('MongoVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    },
    "graphVMProperty": {
      "Condition": "[greater(parameters('GraphVMInstance'),0)]",
      "VMPrefix": "graphvm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('GraphVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    },
    "mysqlVMProperty": {
      "Condition": "[greater(parameters('MySQLVMInstance'),0)]",
      "VMPrefix": "mysqlvm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('MySQLVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    },
    "kafkaVMProperty": {
      "Condition": "[greater(parameters('KafkaVMInstance'),0)]",
      "VMPrefix": "kafkavm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('KafkaVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    },
    "esVMProperty": {
      "Condition": "[greater(parameters('ESVMInstance'),0)]",
      "VMPrefix": "esvm",
      "CloudInitData": "[concat('#cloud-config\n', 'package_upgrade: true\n','packages:\n','  - nginx\n','  - nodejs\n','  - npm\n','runcmd:\n','  - apt-get install mysql-server -y\n')]",
      "Count": "[if(equals(parameters('WebVMInstance'), 0), 1, parameters('WebVMInstance'))]",
      "Size": "Standard_D2_V2"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2016-03-30",
      "location": "[parameters('Location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "condition": "[variables('avSet')[copyIndex()].Condition]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('avSet')[copyIndex()].Name]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('Location')]",
      "copy": {
        "name": "avsetloop",
        "count": "[length(variables('avSet'))]"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2,
        "managed": true
      }
    },
    {
      "condition": "[variables('webVMProperty').Condition]",
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('webVMProperty').LBName, '-pip')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('webVMProperty').LBIPType]"
      }
    },
    {
      "condition": "[variables('webVMProperty').Condition]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('webVMProperty').VMPrefix, 'nic', copyindex(1))]",
      "apiVersion": "2016-03-30",
      "location": "[parameters('Location')]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('webVMProperty').Count]"
      },
      "dependsOn": [
        "[variables('virtualNetworkName')]",
        "[concat('Microsoft.Network/loadBalancers/', variables('webVMProperty').LBName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('webVMProperty').LBID, '/backendAddressPools/BackendPool1')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "condition": "[variables('webVMProperty').Condition]",
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('webVMProperty').LBName]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('webVMProperty').LBPIPID]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('webVMProperty').LBPIPID]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('webVMProperty').FrontEndIPConfigID]"
              },
              "backendAddressPool": {
                "id": "[variables('webVMProperty').LBPoolID]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('webVMProperty').LBProbeID]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "condition": "[variables('webVMProperty').Condition]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('webVMProperty').VMPrefix, copyIndex(1))]",
      "apiVersion": "2016-04-30-preview",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vmLoop",
        "count": "[variables('webVMProperty').Count]"
      },
      "dependsOn": [
        "nicLoop"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSet')[0].name)]"
        },
        "hardwareProfile": {
          "vmSize": "Standard_DS11_v2"
        },
        "osProfile": {
          "computerName": "[concat(variables('webVMProperty').VMPrefix, copyIndex(1))]",
          "adminUsername": "[concat('web', 'admin')]",
          "adminPassword": "RestDifficult^3019",
          "customData": "[base64(variables('webVMProperty').CloudInitData)]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04.0-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('webVMProperty').VMPrefix, 'nic', copyindex(1)))]"
            }
          ]
        }
      }
    }
  ]
}